
.decl edge(from: number, to: number, weight: number)
.printsize edge
.input edge(filename="a-edge.facts")

.decl node(n: number)
.printsize node
.output node
node(n) :- edge(n, _, _).

.decl degree(n: number, c: number)
.printsize degree
.output degree
degree(n, c) :- node(n), c = count : {edge(n, _, _)}.

.decl node_count(n: number)
.printsize node_count
.output node_count
node_count(s) :- s = count : {node(_)}.

.decl outcoming_length(n: number, l: number)
.output outcoming_length
outcoming_length(n, l) :- node(n), l = sum w : edge(n, _, w).

.decl max_weight(weight: number)
.output max_weight
max_weight(w) :- w = max x : edge(_,_,x).

.decl min_weight(weight: number)
.output min_weight
min_weight(w) :- w = min x : edge(_,_,x).

.decl max_node_out_weight(node: number, weight: number)
.output max_node_out_weight
max_node_out_weight(n, w) :- node(n), w = max x : edge(n, _, x).

.decl min_node_out_weight(node: number, weight: number)
.output min_node_out_weight
min_node_out_weight(n, w) :- node(n), w = min x : edge(n, _, x).

