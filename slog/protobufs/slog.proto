syntax = "proto3";

//package protobufs;

// A session response contains a boolean indicating success / failure
// and a string containing either an error or a successfully-created
// session ID
message CreateSessionResponse {
  bool authenticated = 1;
  string err_or_session_id = 2;
}

service CommandService {
  // Client sends hashes, server returns unstored hashes
  rpc ExchangeHashes(HashesRequest) returns (Hashes);
  // Put hashes
  rpc PutHashes(PutHashesRequest) returns (ErrorResponse);
  // upload a CSV file into slog fact database
  rpc PutCSVFacts(stream PutCSVFactsRequest) returns (FactResponse);
  // Compile hashes, promise for initial DB (immediately resolved if previously compiled)
  rpc CompileHashes(CompileHashesRequest) returns (Promise);
  rpc Ping(PingRequest) returns (Pong);
  // Run a set of hashes with an initial database
  rpc RunHashes(RunProgramRequest) returns (Promise);
  rpc QueryPromise(PromiseRequest) returns (PromiseStatus);
  // Get a description of relations for a database
  rpc GetRelations(DatabaseRequest) returns (RelationDescriptionsResponse);
  rpc GetTuples(RelationRequest) returns (stream Tuples);
  rpc GetStrings(StringRequest) returns (stream Strings);
  rpc ShowDB(ShowDBRequest) returns (stream DatabaseInfo);
  rpc TagDB(TagDBRequest) returns (stream ErrorResponse); 
}

message PingRequest {
  bool data = 1;
}

message Pong {
  bool data = 1;
}

message HashesRequest {
  string session_key = 1;
  repeated string hashes = 2;
}

message Hashes {
  repeated string hashes = 2;
}

message PutHashesRequest {
  string session_key = 1;
  repeated string bodies = 4;
}

message PutCSVFactsRequest {
  string session_key = 1;
  string relation_name = 2;
  // string deliminater = 3;
  uint32 buckets = 4;
  // usually it is current database in session, just in case
  string using_database = 5;
  repeated string bodies = 6;
}

message CompileHashesRequest {
  string session_key = 1;
  uint32 buckets = 2;
  // if empty, don't use another DB, create new one
  string using_database = 3;
  repeated string hashes = 4;
}

message RunProgramRequest {
  string session_key = 1;
  // Must be the initial database or a database for which this program
  // was compiled.
  string using_database = 2;
  int32 cores = 3;
  repeated string hashes = 4;
}

message ErrorResponse {
  bool success = 1;
  optional string error_msg = 2;
}

message FactResponse {
  bool success = 1;
  optional string error_msg = 2;
  optional string new_database = 3;
}

message DatabaseRequest {
  string session_key = 1;
  string database_id = 2;
}

message GetCanonicalDatabaseRequest {
  string session_key = 1;
  repeated string hashes = 2;
}

message RelationRequest {
  string session_key = 1;
  string database_id = 2;
  uint32 tag = 3;
}

message RelationDescription {
  string name = 1;
  uint32 arity = 2;
  uint32 tag = 3;
}

message RelationDescriptionsResponse {
  bool success = 1;
  repeated RelationDescription relations = 2;
}

message StringRequest {
  string database_id = 1;
}

message Strings {
  uint32 id = 1;
  string text = 2;
}

message PromiseRequest {
  string session_key = 1;
  uint64 promise_id = 2;
}

message Promise {
  uint64 promise_id = 2;
}

message PromiseStatus {
  uint32 status = 1;
  string err_or_db = 2;
}

message Tuples {
  uint32 status = 1;
  uint32 num_tuples = 2;
  repeated uint64 data = 3;
}

message ShowDBRequest {
  // reserved, only need to be empty
  string msg = 1; 
}

message DatabaseInfo {
  string database_id = 1;
  string tag_name = 2;
  string user = 3;
  string forked_from = 4;
}

message TagDBRequest {
  string database_id = 1;
  string tag_name = 2;
}
