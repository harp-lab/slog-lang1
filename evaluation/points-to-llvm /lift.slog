
; (state (contour ...) )
;;

[(support-instr i) <-- (add_instr i)]
[(support-instr i) <-- (fadd_instr i)]
[(support-instr i) <-- (sub_instr i)]
[(support-instr i) <-- (fsub_instr i)]
[(support-instr i) <-- (mul_instr i)]
[(support-instr i) <-- (fmul_instr i)]
[(support-instr i) <-- (udiv_instr i)]
[(support-instr i) <-- (sdiv_instr i)]
[(support-instr i) <-- (fdiv_instr i)]
[(support-instr i) <-- (urem_instr i)]
[(support-instr i) <-- (srem_instr i)]
[(support-instr i) <-- (frem_instr i)]
[(support-instr i) <-- (shl_instr i)]
[(support-instr i) <-- (ashr_instr i)]
[(support-instr i) <-- (and_instr i)]
[(support-instr i) <-- (or_instr i)]
[(support-instr i) <-- (xor_instr i)]
[(support-instr i) <-- (ret_instr i)]
[(support-instr i) <-- (br_instr i)]
[(support-instr i) <-- (switch_instr i)]
[(support-instr i) <-- (alloca_instr i)]
[(support-instr i) <-- (load_instr i)]
[(support-instr i) <-- (store_instr i)]
[(support-instr i) <-- (getelementptr_instr i)]
[(support-instr i) <-- (trunc_instr i)]
[(support-instr i) <-- (zext_instr i)]
[(support-instr i) <-- (sext_instr i)]
[(support-instr i) <-- (fptrunc_instr i)]
[(support-instr i) <-- (fpext_instr i)]
[(support-instr i) <-- (fptoui_instr i)]
[(support-instr i) <-- (fptosi_instr i)]
[(support-instr i) <-- (uitofp_instr i)]
[(support-instr i) <-- (sitofp_instr i)]
[(support-instr i) <-- (ptrtoint_instr i)]
[(support-instr i) <-- (inttoptr_instr i)]
[(support-instr i) <-- (bitcast_instr i)]
[(support-instr i) <-- (icmp_instr i)]
[(support-instr i) <-- (phi_instr i)]
[(support-instr i) <-- (select_instr i)]
[(support-instr i) <-- (call_instr i)]
[(support-instr i) <-- (unreachable_instr i)]
[(instr_successor a b) --> (instr a)]
[(instr_successor a b) --> (instr b)]
[(block_first_instr bb_id a) --> (instr a)]
[(block_last_instr bb_id a) --> (instr a)]
[(unsupported-instr i) <-- (instr i) (~ support-instr i)]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; lift operand
(lift-operand op ?(constant op))
(lift-operand op ?(variable op))

;; lift flat facts to slog facts

; bypass unsupported
(lift i ?(unsupported-instr i))
[(unsupported-instr i) --> (lift ?(do-lift i rst) (unsupported i rst))]

;; ret
; ret <type> <value>       ; Return a value from a non-void function
; ret void                 ; Return from void function
; .decl ret_instr_operand(instr:RetInstruction, val:Operand)
; .decl ret_instr_void_(instr:RetInstruction)
[(lift ?(do-lift i rst) (ret {lift-operand v} rst)) <-- (ret_instr_operand i v)]
[(lift ?(do-lift i rst) (ret-void rst)) <-- (ret_instr_void_ i)]
; [(lift i (ret-unknown i)) <-- (ret-from-source i)]

;; br
; br i1 <cond>, label <iftrue>, label <iffalse>
; br label <dest>          ; Unconditional branch
; .decl br_instr_uncond_label(instr:Instruction, label:Variable)
[(lift ?(do-lift i rst) (br-uncond l rst)) <-- (br_instr_uncond_label i l)]
; .decl br_instr_condition(instr:Instruction, cond:Operand)
; .decl br_instr_true_label(instr:Instruction, label:Variable)
; .decl br_instr_false_label(instr:Instruction, label:Variable)
[(lift ?(do-lift i rst) (br-cond {lift-operand v} lt lf rst))
    <--
    (br_instr_condition i v)
    (br_instr_true_label i lt)
    (br_instr_false_label i lf)]

;; switch
; switch <intty> <value>, label <defaultdest> [ <intty> <val>, label <dest> ... ]
; .decl switch_instr_operand(instr:SwitchInstruction, value:Operand)
; .decl switch_instr_ncases(instr:SwitchInstruction, total:number)
; .decl switch_instr_case_value(instr:SwitchInstruction, index:number, constant:Constant)
; .decl switch_instr_case_label(instr:SwitchInstruction, index:number, label:Label)
; .decl switch_instr_default_label(instr:SwitchInstruction, label:Variable)
[(lift-switch-helper i 0 []) <-- (switch_instr_operand i _)]
[(lift-switch-helper i n rst)
 (switch_instr_case_value i n const)
 (switch_instr_case_label i n l)
    -->
    (lift-switch-helper i {+ n 1} [(case const l) rst ...])]
[(lift ?(do-lift i rst) (switch {lift-operand v} cases default-l rst))
    <--
    (switch_instr_operand i v)
    (switch_instr_ncases i n)
    (lift-switch-helper i n cases)
    (switch_instr_default_label i default-l)]


; Binary Operation
; all binary op are similar
; <result> = add <ty> <op1>, <op2>          ; yields ty:result
; <result> = add nuw <ty> <op1>, <op2>      ; yields ty:result
; <result> = add nsw <ty> <op1>, <op2>      ; yields ty:result
; <result> = add nuw nsw <ty> <op1>, <op2>  ; yields ty:result
; .decl add_instr_first_operand(instr:AddInstruction, op:Operand)
; .decl add_instr_second_operand(instr:AddInstruction, op:Operand)
[(lift ?(do-lift i rst) (binary-op "add" lhs {lift-operand op1} {lift-operand op2} rst))
 (instr-type i "call")
    <--
    (add_instr_first_operand i op1)
    (add_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "fadd" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (fadd_instr_first_operand i op1)
    (fadd_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "sub" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (sub_instr_first_operand i op1)
    (sub_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "fsub" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (fsub_instr_first_operand i op1)
    (fsub_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "mul" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (mul_instr_first_operand i op1)
    (mul_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "fmul" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (fmul_instr_first_operand i op1)
    (fmul_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "udiv" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (udiv_instr_first_operand i op1)
    (udiv_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "sdiv" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (sdiv_instr_first_operand i op1)
    (sdiv_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "fdiv" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (fdiv_instr_first_operand i op1)
    (fdiv_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "urem" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (urem_instr_first_operand i op1)
    (urem_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "srem" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (srem_instr_first_operand i op1)
    (srem_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "frem" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (frem_instr_first_operand i op1)
    (frem_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
; bitwise
[(lift ?(do-lift i rst) (binary-op "lshr" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (lshr_instr_first_operand i op1)
    (lshr_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "shl" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (shl_instr_first_operand i op1)
    (shl_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "ashr" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (ashr_instr_first_operand i op1)
    (ashr_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "and" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (and_instr_first_operand i op1)
    (and_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "or" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (or_instr_first_operand i op1)
    (or_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (binary-op "xor" lhs {lift-operand op1} {lift-operand op2} rst))
    <--
    (xor_instr_first_operand i op1)
    (xor_instr_second_operand i op2)
    (instr_assigns_to i lhs)]

; fneg
[(lift ?(do-lift i rst) (fneg lhs {lift-operand op} rst))
    <--
    (fneg_instr_operand i op)
    (instr_assigns_to i lhs)]

; Memory related instruction

;; alloca
; <result> = alloca [inalloca] <type> [, <ty> <NumElements>] [, align <alignment>] [, addrspace(<num>)]     ; yields type addrspace(num)*:result
; .decl alloca_instr_size(instr:AllocaInstruction, size:Operand)
[(lift ?(do-lift i rst) (alloca lhs n rst)) <-- (alloca_instr_type i n) (instr_assigns_to i lhs)]

;; load
; <result> = load [volatile] <ty>, ptr <pointer>[, align <alignment>][, !nontemporal !<nontemp_node>][, !invariant.load !<empty_node>][, !invariant.group !<empty_node>][, !nonnull !<empty_node>][, !dereferenceable !<deref_bytes_node>][, !dereferenceable_or_null !<deref_bytes_node>][, !align !<align_node>][, !noundef !<empty_node>]
; <result> = load atomic [volatile] <ty>, ptr <pointer> [syncscope("<target-scope>")] <ordering>, align <alignment> [, !invariant.group !<empty_node>]
; !<nontemp_node> = !{ i32 1 }
; !<empty_node> = !{}
; !<deref_bytes_node> = !{ i64 <dereferenceable_bytes> }
; !<align_node> = !{ i64 <value_alignment> }
; .decl load_instr_address(instr:LoadInstruction, pointer:Operand)
[(lift ?(do-lift i rst) (load lhs {lift-operand ptr} rst)) <-- (load_instr_address i ptr) (instr_assigns_to i lhs)]

;; store
; store [volatile] <ty> <value>, ptr <pointer>[, align <alignment>][, !nontemporal !<nontemp_node>][, !invariant.group !<empty_node>]        ; yields void
; store atomic [volatile] <ty> <value>, ptr <pointer> [syncscope("<target-scope>")] <ordering>, align <alignment> [, !invariant.group !<empty_node>] ; yields void
; !<nontemp_node> = !{ i32 1 }
; !<empty_node> = !{}
; .decl store_instr_value(instr:symbol, value:symbol)
; .decl store_instr_address(instr:symbol, pointer:symbol)
[(lift ?(do-lift i rst) (store {lift-operand v} {lift-operand addr} rst)) <-- (store_instr_value i v) (store_instr_address i addr)]

;; getelementptr
; <result> = getelementptr <ty>, ptr <ptrval>{, [inrange] <ty> <idx>}*
; <result> = getelementptr inbounds <ty>, ptr <ptrval>{, [inrange] <ty> <idx>}*
; <result> = getelementptr <ty>, <N x ptr> <ptrval>, [inrange] <vector index type> <idx>
; .decl getelementptr_instr_base(instr:GetElementPtrInstruction, ptr:Operand)
; .decl getelementptr_instr_nindices(instr:GetElementPtrInstruction, total:number)
; .decl getelementptr_instr_index(instr:GetElementPtrInstruction, i:GepIndex, idx:Operand)
[(lift-gep-indices-helper i n []) <-- (getelementptr_instr_nindices i n)]
[(lift-gep-indices-helper i n indices)
 (> n 0)
 (- n 1 cur-n)
 (getelementptr_instr_index i cur-n arg)
    -->
    (lift-gep-indices-helper i cur-n [{lift-operand arg} indices ...])]
[(lift ?(do-lift i rst) (getelementptr lhs {lift-operand base} {lift-gep-indices-helper i 0} rst))
    <--
    (getelementptr_instr_base i base)
    (instr_assigns_to i lhs)]

;; Type Conversion

; <result> = trunc <ty> <value> to <ty2>             ; yields ty2
; .decl trunc_instr_from_operand(instr: symbol, val: symbol)
[(lift ?(do-lift i rst) (convert "trunc" lhs {lift-operand v} rst)) <-- (trunc_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = zext <ty> <value> to <ty2>             ; yields ty2
; .decl zext_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "zext" lhs {lift-operand v} rst)) <-- (zext_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = sext <ty> <value> to <ty2>             ; yields ty2
; .decl sext_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "sext" lhs {lift-operand v} rst)) <-- (sext_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = fptrunc <ty> <value> to <ty2>             ; yields ty2
; .decl fptrunc_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "fptrunc" lhs {lift-operand v} rst)) <-- (fptrunc_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = fpext <ty> <value> to <ty2>             ; yields ty2
; .decl fpext_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "fpext" lhs {lift-operand v} rst)) <-- (fpext_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = fptoui <ty> <value> to <ty2>             ; yields ty2
; .decl fptoui_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "fptoui" lhs {lift-operand v} rst)) <-- (fptoui_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = fptosi <ty> <value> to <ty2>             ; yields ty2
; .decl fptosi_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "fptosi" lhs {lift-operand v} rst)) <-- (fptosi_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = uitofp <ty> <value> to <ty2>             ; yields ty2
; .decl uitofp_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "uitofp" lhs {lift-operand v} rst)) <-- (uitofp_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = sitofp <ty> <value> to <ty2>             ; yields ty2
; .decl sitofp_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "sitofp" lhs {lift-operand v} rst)) <-- (sitofp_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = ptrtoint <ty> <value> to <ty2>             ; yields ty2
; .decl ptrtoint_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "ptrtoint" lhs {lift-operand v} rst)) <-- (ptrtoint_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = inttoptr <ty> <value> to <ty2>[, !dereferenceable !<deref_bytes_node>][, !dereferenceable_or_null !<deref_bytes_node>]    
; .decl inttoptr_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "inttoptr" lhs {lift-operand v} rst)) <-- (inttoptr_instr_from_operand i v) (instr_assigns_to i lhs)]
; <result> = bitcast <ty> <value> to <ty2>             ; yields ty2
; .decl bitcast_instr_from_operand(instr:symbol, val:symbol)
[(lift ?(do-lift i rst) (convert "bitcast" lhs {lift-operand v} rst)) <-- (bitcast_instr_from_operand i v) (instr_assigns_to i lhs)]
;;

;; icmp/fcmp
; <result> = icmp <cond> <ty> <op1>, <op2>   ; yields i1 or <N x i1>:result
; .decl icmp_instr_condition(instr:ICmpInstruction, cond:ICmpCondition)
; .decl icmp_instr_first_operand(instr:ICmpInstruction, op:Operand)
; .decl icmp_instr_second_operand(instr:ICmpInstruction, op:Operand)
[(lift ?(do-lift i rst) (icmp lhs cond {lift-operand op1} {lift-operand op2} rst)) <--
    (icmp_instr_condition i cond)
    (icmp_instr_first_operand i op1)
    (icmp_instr_second_operand i op2)
    (instr_assigns_to i lhs)]
[(lift ?(do-lift i rst) (fcmp lhs cond {lift-operand op1} {lift-operand op2} rst)) <--
    (fcmp_instr_condition i cond)
    (fcmp_instr_first_operand i op1)
    (fcmp_instr_second_operand i op2)
    (instr_assigns_to i lhs)]

;; phi
;; <result> = phi [fast-math-flags] <ty> [ <val0>, <label0>], ...
; .decl phi_instr_pair_label
; .decl phi_instr_pair_value
; .decl phi_instr
; .decl phi_instr_npairs
[(lift-phi-helper instr 0 [])
    <--
    (phi_instr_pair_label instr 0 label)
    (phi_instr_pair_value instr 0 v)]
[(lift-phi-helper instr {+ 1 n} [(phi-value-pair label {lift-operand v}) rst ...])
    <--
    (lift-phi-helper instr n rst)
    (phi_instr_pair_label instr n label)
    (phi_instr_pair_value instr n v)]

[(lift ?(do-lift instr-id rst) (phi lhs pairs rst))
    <--
    (phi_instr_npairs instr-id p-len)
    (lift-phi-helper instr-id p-len pairs)
    (instr_assigns_to instr-id lhs)]

;; select
; <result> = select [fast-math flags] selty <cond>, <ty> <val1>, <ty> <val2>             ; yields ty
; .decl select_instr_condition(instr:SelectInstruction, condition:Operand)
; .decl select_instr_first_operand(instr:SelectInstruction, op:Operand)
; .decl select_instr_second_operand(instr:SelectInstruction, op:Operand)
[(lift ?(do-lift i rst) (select lhs {lift-operand cond} {lift-operand v1} {lift-operand v2} rst))
    <--
    (select_instr_condition i cond)
    (select_instr_first_operand i v1)
    (select_instr_second_operand i v2)
    (instr_assigns_to i lhs)]


[(external-fconst fconst) <-- (fconst-funcdecl fconst fdecl) (external-funcdecl fdecl)]
[(internal-fconst fconst) <-- (fconst-funcdecl fconst fdecl) (func fdecl)]
[(indirect-fop fop) <-- (call_instr_func_operand i fop) (~ fconst-funcdecl fop _)]
;; call
; <result> = [tail | musttail | notail ] call [fast-math flags] [cconv] [ret attrs] [addrspace(<num>)]
;            <ty>|<fnty> <fnptrval>(<function args>) [fn attrs] [ operand bundles ]
; .decl call_instr_func_operand(instr:CallInstruction, op:Operand)
; .decl call_instr_arg(instr:CallInstruction, i:ArgumentIndex, arg:Operand)
[(call-nargs i {count call_instr_arg i _ _}) <-- (call_instr i)]
[(lift-call-args-helper i n []) <-- (call-nargs i n)]
[(lift-call-args-helper i n rst)
 (> n 0)
 (- n 1 current-idx)
 (call_instr_arg i current-idx arg)
    -->
    (lift-call-args-helper i current-idx [{lift-operand arg} rst ...])]

[(lift ?(do-lift i rst) (call "void" {lift-operand fptr} {lift-call-args-helper i 0} rst))
    <--
    (internal-fconst fptr)
    --
    (call_instr_func_operand i fptr)
    (~ instr_assigns_to i _)]
[(lift ?(do-lift i rst) (call lhs {lift-operand fptr} {lift-call-args-helper i 0} rst))
    <--
    (internal-fconst fptr)
    --
    (call_instr_func_operand i fptr)
    (instr_assigns_to i lhs)]

[(lift ?(do-lift i rst) (call-external "void" {lift-operand fptr} {lift-call-args-helper i 0} rst))
    <--
    (external-fconst fptr)
    --
    (call_instr_func_operand i fptr)
    (~ instr_assigns_to i _)]
[(lift ?(do-lift i rst) (call-external lhs {lift-operand fptr} {lift-call-args-helper i 0} rst))
    <--
    (external-fconst fptr)
    --
    (call_instr_func_operand i fptr)
    (instr_assigns_to i lhs)]

[(lift ?(do-lift i rst) (call-indirect "void" {lift-operand fptr} {lift-call-args-helper i 0} rst))
    <--
    (indirect-fop fptr)
    --
    (call_instr_func_operand i fptr)
    (~ instr_assigns_to i _)]
[(lift ?(do-lift i rst) (call-indirect lhs {lift-operand fptr} {lift-call-args-helper i 0} rst))
    <--
    (indirect-fop fptr)
    --
    (call_instr_func_operand i fptr)
    (instr_assigns_to i lhs)]

[(lift ?(do-lift i rst) (unreachable i rst)) <-- (unreachable_instr i)]

;;;;;;;;;;;;;;;;;

;; Intrinstic
; memcpy
; declare void @llvm.memcpy.p0.p0.i32(ptr <dest>, ptr <src>,
;                                     i32 <len>, i1 <isvolatile>)
; declare void @llvm.memcpy.p0.p0.i64(ptr <dest>, ptr <src>,
;                                     i64 <len>, i1 <isvolatile>)
[(lift ?(do-lift i rst) (intrinstic-memcpy {lift-operand dest-arg} {lift-operand src-arg} {lift-operand len-arg} rst))
    <--
    (call_instr_arg i 0 dest-arg)
    (call_instr_arg i 1 src-arg)
    (call_instr_arg i 2 len-arg)
    --
    (memcpy_fconst fptr)
    (call_instr_func_operand i fptr)]

;; va_start
; declare void @llvm.va_start(ptr <arglist>)
[(lift ?(do-lift i rst) (intrinstic-va_start {lift-operand dest-arg} rst))
    <--
    (call_instr_arg i 0 dest-arg)
    --
    (func_constant_fn_name fptr "@llvm.va_start")
    (call_instr_func_operand i fptr)]

; va_copy
; declare void @llvm.va_copy(ptr <destarglist>, ptr <srcarglist>)
[(lift ?(do-lift i rst) (intrinstic-va_copy {lift-operand dest-arg} {lift-operand src-arg} rst))
    <--
    (call_instr_arg i 0 dest-arg)
    (call_instr_arg i 1 src-arg)
    --
    (func_constant_fn_name fptr "@llvm.va_copy")
    (call_instr_func_operand i fptr)]

;;;;;;;;;;;;;;;;;

;; Possible targets (not impl now)

;; indirectbr (c++ ?, we maybe don't need this)
;; indirectbr ptr <address>, [ label <dest1>, label <dest2>, ... ]

;; invoke
; <result> = invoke [cconv] [ret attrs] [addrspace(<num>)] <ty>|<fnty> <fnptrval>(<function args>) [fn attrs]
;               [operand bundles] to label <normal label> unwind label <exception label>

;; callbr
; <result> = callbr [cconv] [ret attrs] [addrspace(<num>)] <ty>|<fnty> <fnptrval>(<function args>) [fn attrs]
;               [operand bundles] to label <fallthrough label> [indirect labels]

;; arith

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; flatten block to struct block
; .decl block_last_instr
; .decl block_first_instr
; .decl instr_bb_entry
; .decl instr_successor

[(bb-instrs_help bb_id a (end))
    <--
    (block_last_instr bb_id a)]

[(bb-instrs_help bb_id b rst)
 (instr_bb_entry b bb_id)
 --
 (instr_successor a b)
 --
 (instr_bb_entry a bb_id)
 --
 (lift !(do-lift b rst) b-lifted)
 -->
    (bb-instrs_help bb_id a b-lifted)]

[(bb-instrs bb_id a-lifted)
    <--
    (lift !(do-lift a rst) a-lifted)
    (bb-instrs_help bb_id a rst)
    (block_first_instr bb_id a)]

[(bb-instrs bb_id a-lifted)
    <--
    (lift !(do-lift a (end)) a-lifted)
    (block_first_instr bb_id a)
    (block_last_instr bb_id a)]

[(bb l) <-- (block_last_instr l _)]
[(bb_failed l) <-- (bb l) (~ bb-instrs l _)]

; function entry bb
; [(block_first_instr i2 bb-id)
;  (instr_successor i1 i2)
;  (instr_func i1 f1)
;  (instr_func i2 f2)
;  (=/= f1 f2)
;  -->
;     (func-entry-bb f2 bb-id)]
[(block_first_instr bb-id i)
 (~ block_predecessor bb-id _)
 (instr_func i f)
 -->
    (func-entry-bb f bb-id)]

[(fconst-params fconst n param)
    <--
    (func_param {fconst-funcdecl fconst} n param)]

[(fconst-funcdecl fconst fdecl)
  <--
    (func_constant_fn_name fconst fname)
    (func_name fdecl fname)]

[(supported-intrinstic-decl fdecl) <-- (memcpy_fdecl fdecl)]
[(supported-intrinstic-decl fdecl) <-- (func_name fdecl "@llvm.va_start")]
[(supported-intrinstic-decl fdecl) <-- (func_name fdecl "@llvm.va_copy")]

; this include intrinstic
[(external-funcdecl fdecl)
 <--
    (func_signature fdecl fsig)
    (~ func fdecl)
    (~ supported-intrinstic-decl fdecl)]

[(fconst-ret-void fconst)
    <--
    (fconst-funcdecl fconst fdecl)
    (func_type_return {func_ty fdecl} "void")]
[(fconst-ret-ptr fconst)
    <--
    (fconst-funcdecl fconst fdecl)
    (func_type_return {func_ty fdecl} "ptr")]
[(fconst-ret-val fconst)
    <--
    (fconst-funcdecl fconst _)
    (~ fconst-ret-ptr fconst)
    (~ fconst-ret-void fconst)]

; build call graph
[(call-graph-edge caller {fconst-funcdecl callee-ptr})
    <--
    (call_instr_func_operand i callee-ptr)
    (instr_func i caller)]

[(call-graph-source f) <-- (func f) (~ call-graph-edge _ f)]

[(ret-from-source i)
    <--
    (ret_instr_operand i _)
    (instr_func i f)
    --
    (call-graph-source f)]
[(ret-from-source i)
    <--
    (ret_instr_void_ i)
    (instr_func i f)
    --
    (call-graph-source f)]

[(lifted-instr_func lifted-i fdecl) <-- (instr_func i fdecl) (lift (do-lift i _) lifted-i)]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; sanity debug check

; check if all type of instr correctly lifted
[(lift-failed-ret a) <-- (ret_instr a) (~ lift (do-lift a _) _)]
[(lift-failed-br a) <-- (br_instr a) (~ lift (do-lift a _) _)]
[(lift-failed-switch i) <-- (switch_instr i) (~ lift (do-lift i _) _)]

[(lift-failed-add i) <-- (add_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-fadd i) <-- (fadd_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-sub i) <-- (sub_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-fsub i) <-- (fsub_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-mul i) <-- (mul_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-fmul i) <-- (fmul_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-udiv i) <-- (udiv_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-sdiv i) <-- (sdiv_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-fdiv i) <-- (fdiv_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-urem i) <-- (urem_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-srem i) <-- (srem_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-frem i) <-- (frem_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-shl i) <-- (shl_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-ashr i) <-- (ashr_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-and i) <-- (and_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-or i) <-- (or_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-xor i) <-- (xor_instr i) (~ lift (do-lift i _) _)]

[(lift-failed-alloca i) <-- (alloca_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-load i) <-- (load_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-store i) <-- (store_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-gep i) <-- (getelementptr_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-icmp i) <-- (icmp_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-fcmp i) <-- (fcmp_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-phi i) <-- (phi_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-select i) <-- (select_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-call i) <-- (call_instr i) (~ lift (do-lift i _) _)]
[(lift-failed-fneg i) <-- (fneg_instr i) (~ lift (do-lift i _) _)]

[(bb-instrs_help bb_id b rst)
 (instr_bb_entry b bb_id)
 (instr_bb_entry a bb_id)
 (instr_successor a b)
 (~ lift (do-lift b _) _)
 -->
    (instr-failed b)]
